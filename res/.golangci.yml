run:
    # default concurrency is a available CPU number
    concurrency: 4

    # timeout for analysis, e.g. 30s, 5m, default is 1m
    deadline: 1m

    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1

    # include test files or not, default is true
    tests: false

    # list of build tags, all linters use it. Default is empty list.
    build-tags:

    # which dirs to skip: they won't be analyzed;
    # can use regexp here: generated.*, regexp is applied on full path;
    # default value is empty list, but next dirs are always skipped independently
    # from this option's value:
    #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
    skip-dirs:
        - vendor$
        - libs/lab

    # which files to skip: they will be analyzed, but issues from them
    # won't be reported. Default value is empty list, but there is
    # no need to include all autogenerated files, we confidently recognize
    # autogenerated files. If it's not please let us know.
    skip-files:
        - ".*\\.pb\\.go$"

    # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
    # If invoked with -mod=readonly, the go command is disallowed from the implicit
    # automatic updating of go.mod described above. Instead, it fails when any changes
    # to go.mod are needed. This setting is most useful to check that go.mod does
    # not need updates, such as in a continuous integration and testing system.
    # If invoked with -mod=vendor, the go command assumes that the vendor
    # directory holds the correct copies of dependencies and ignores
    # the dependency descriptions in go.mod.
    modules-download-mode: readonly

    # Allow multiple parallel golangci-lint instances running.
    # If false (default) - golangci-lint acquires file lock on start.
    allow-parallel-runners: false


# output configuration options
output:
    # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
    format: colored-line-number

    # print lines of code with issue, default is true
    print-issued-lines: true

    # print linter name in the end of issue text, default is true
    print-linter-name: true

    # make issues output unique by line, default is true
    uniq-by-line: true


# all available settings of specific linters
linters-settings:
    dogsled:
        # checks assignments with too many blank identifiers; default is 2
        max-blank-identifiers: 2

    dupl:
        # tokens count to trigger issue, 150 by default
        threshold: 1000

    errcheck:
        # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
        # default is false: such cases aren't reported by default.
        check-type-assertions: false

        # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
        # default is false: such cases aren't reported by default.
        check-blank: false

        # path to a file containing a list of functions to exclude from checking
        # see https://github.com/kisielk/errcheck#excluding-functions for details
        # exclude: /path/to/file.txt

    funlen:
        lines: 600
        statements: 100

    gocognit:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 50

    gocyclo:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 50

    nestif:
        # minimal complexity of if statements to report, 5 by default
        min-complexity: 20

    goconst:
        # minimal length of string constant, 3 by default
        min-len: 5
        # minimal occurrences count to trigger, 3 by default
        min-occurrences: 5

    gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    # enabled-checks:
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    # disabled-checks:

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # enabled-tags:
    # disabled-tags:


    gofmt:
        # simplify code: gofmt with `-s` option, true by default
        simplify: true

    goimports:
        # put imports beginning with prefix after 3rd-party packages;
        # it's a comma-separated list of prefixes
        local-prefixes: git.pnhub.ru/gpbpn/core

    golint:
        # minimal confidence for issues, default is 0.8
        min-confidence: 0.8

    gomnd:
        settings:
            mnd:
                # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
                checks: argument,case,condition,operation,return,assign
                excludes:
                    - ".*time."
    govet:
        # report about shadowed variables
        check-shadowing: true
        # settings per analyzer
        settings:
            printf: # analyzer name, run `go tool vet help` to see all analyzers
                funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
        # enable or disable analyzers by name
        enable:
            - atomicalign
        enable-all: false
        disable:
            - shadow
        disable-all: false


    lll:
        # max line length, lines longer will be reported. Default is 120.
        # '\t' is counted as 1 character by default, and can be changed with the tab-width option
        line-length: 200
        # tab width in spaces. Default to 1.
        tab-width: 1

    maligned:
        # print struct with more effective memory layout or not, false by default
        suggest-new: true

    misspell:
        # Correct spellings using locale preferences for US or UK.
        # Default is to use a neutral variety of English.
        # Setting locale to US will correct the British spelling of 'colour' to 'color'.
        locale: US
        ignore-words:

    nakedret:
        # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
        max-func-lines: 30

    prealloc:
        # XXX: we don't recommend using this linter before doing performance profiling.
        # For most programs usage of prealloc will be a premature optimization.

        # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
        # True by default.
        simple: true
        range-loops: true # Report preallocation suggestions on range loops, true by default
        for-loops: false # Report preallocation suggestions on for loops, false by default

    nolintlint:
        # Enable to ensure that nolint directives are all used. Default is true.
        allow-unused: false
        # Disable to ensure that nolint directives don't have a leading space. Default is true.
        allow-leading-space: true
        # Exclude following linters from requiring an explanation.  Default is [].
        allow-no-explanation: []
        # Enable to require an explanation after each nolint directive. Default is false.
        require-explanation: true
        # Enable to require an explanation after each nolint directive. Default is false.
        require-specific: true

    rowserrcheck:
        packages:
            - github.com/jmoiron/sqlx

    testpackage:
        # regexp pattern to skip files
        skip-regexp: (export|internal)_test\.go

    unparam:
        # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
        # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
        # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
        # with golangci-lint call it on a directory with the changed file.
        check-exported: false

    unused:
        # treat code as a program (not a library) and report unused exported identifiers; default is false.
        # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
        # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
        # with golangci-lint call it on a directory with the changed file.
        check-exported: false

    whitespace:
        multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
        multi-func: false # Enforces newlines (or comments) after every multi-line function signature

linters:
    enable-all: true
    disable:
        - gomnd
        - godot
        - wsl
        - gochecknoglobals

issues:
    # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
    max-per-linter: 50
    # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
    max-same: 3
    new: false
    exclude-use-default: false
    exclude:
        - "G401"
        - "G501"
        - "G104"
        - "G402"
        - "G304"
        - "err113"
        - ".Close()"
        - "unnecessary leading newline"
        - "should have comment or be unexported"
